name: PIPELINE - CYBERSEC CHALLENGE for VulnNodeApp
run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€
on: 
  push:
    branches: [main]
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source
        uses: actions/checkout@v3
      - name: Login to docker hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} 
      - name: Build docker image
        run: docker build -t jahs993/cybersec-challenge .
      - name: Publish image to docker hub
        run: docker push jahs993/cybersec-challenge:latest
  dependencies_vulnerability_scan:
    runs-on: ubuntu-latest
    needs: build
    name: Dependencies Scan
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Set up node version
        uses: actions/setup-node@v4
        with:
          node-version: 12
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
      - name: Count total number of vulnerabilities
        run: |
          RESULTS_LENGTH=$(jq '.runs[0].results | length' snyk.sarif)
          echo "RESULTS_LENGTH=$RESULTS_LENGTH" >> $GITHUB_ENV
          echo $RESULTS_LENGTH
  code_vulnerability_scan:
    runs-on: ubuntu-latest
    needs: dependencies_vulnerability_scan
    name: Sast Scan
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Set up node version
        uses: actions/setup-node@v4
        with:
          node-version: 12
      - name: Cache dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: node_modules
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: npm install
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test
          args: --sarif-file-output=snyk.sarif
      - name: Count total number of vulnerabilities
        run: |
          RESULTS_LENGTH=$(jq '.runs[0].results | length' snyk.sarif)
          echo "RESULTS_LENGTH=$RESULTS_LENGTH" >> $GITHUB_ENV
          echo $RESULTS_LENGTH
  docker_vulnerability_scan:
    needs: code_vulnerability_scan
    runs-on: ubuntu-latest
    name: Scan Docker image
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
      - name: Build docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: cybersec:${{ github.sha }}
      - name: Scan the Docker image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'cybersec:${{ github.sha }}'
          format: 'table'
          exit-code: '0' # Set to 1 to fail the workflow if vulnerabilities are found
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
  deployment:
    needs: docker_vulnerability_scan
    runs-on: aws-ec2
    name: Deploy App
    steps:
      - name: Pull image from docker hub
        run: docker pull jahs993/cybersec-challenge:latest
      - name: Delete old container
        run: docker rm -f cybersec-challenge-container
      - name: Run docker container
        run: docker run -d -p 3000:3000 --name cybersec-challenge-container jahs993/cybersec-challenge
  soos_dast_baseline_analysis:
    needs: deployment
    name: SOOS DAST Baseline Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Run SOOS DAST Baseline Analysis
        uses: soos-io/soos-dast-github-action@v2 # GET Latest Version from https://github.com/marketplace/actions/soos-dast
        with:
          client_id: ${{ secrets.SOOS_CLIENT_ID }}
          api_key: ${{ secrets.SOOS_API_KEY }}
          project_name: "DAST-GitHub-Action-Test"
          scan_mode: "baseline"
          target_url: "http://52.15.80.53:3000/"
